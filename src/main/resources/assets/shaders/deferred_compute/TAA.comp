/*

Copyright (C) 2015-2020 Anarchy Engine Open Source Contributors (see CONTRIBUTORS.md)

This Source Code Form is subject to the terms of the Mozilla Public
License, v. 2.0. If a copy of the MPL was not distributed with this
file, You can obtain one at https://mozilla.org/MPL/2.0/.

 */

layout(local_size_x = 16, local_size_y = 16) in;
layout(rgba16f, binding = 0) restrict writeonly uniform image2D out_color;

uniform vec2 resolution;
uniform vec2 pixelOffset;
uniform vec2 pixelSize;

uniform sampler2D image;
uniform sampler2D previous;

uniform sampler2D gMotion;

uniform bool useTAA;

void main() {
	ivec2 pixelCoords = ivec2(gl_GlobalInvocationID.xy);
	vec2 textureCoords = pixelCoords.xy / resolution + pixelOffset;

	if (!useTAA) {
		imageStore(out_color, pixelCoords, vec4(texelFetch(image, pixelCoords, 0).rgb, 0.0));
		return;
	}
	vec3 neighbourhood[9];

	neighbourhood[0] = texelFetch(image, pixelCoords + ivec2(-1, -1), 0).rgb;
	neighbourhood[1] = texelFetch(image, pixelCoords + ivec2(+0, -1), 0).rgb;
	neighbourhood[2] = texelFetch(image, pixelCoords + ivec2(+1, -1), 0).rgb;
	neighbourhood[3] = texelFetch(image, pixelCoords + ivec2(-1, +0), 0).rgb;
	neighbourhood[4] = texelFetch(image, pixelCoords + ivec2(+0, +0), 0).rgb;
	neighbourhood[5] = texelFetch(image, pixelCoords + ivec2(+1, +0), 0).rgb;
	neighbourhood[6] = texelFetch(image, pixelCoords + ivec2(-1, +1), 0).rgb;
	neighbourhood[7] = texelFetch(image, pixelCoords + ivec2(+0, +1), 0).rgb;
	neighbourhood[8] = texelFetch(image, pixelCoords + ivec2(+1, +1), 0).rgb;

	vec3 nmin = neighbourhood[0];
	vec3 nmax = neighbourhood[0];
	for (int i = 1; i < 9; ++i) {
		nmin = min(nmin, neighbourhood[i]);
		nmax = max(nmax, neighbourhood[i]);
	}

	vec2 vel = texelFetch(gMotion, pixelCoords, 0).rg * 0.5;

	vec2 histUv = textureCoords + vel;

	vec3 histSample = clamp(texture(previous, histUv).rgb, nmin, nmax);

	float blend = 0.1;

	// 0.2 3x TAA
	// 0.1 4x TAA
	// 0.05 8x TAA

	bvec2 a = greaterThan(histUv, vec2(1.0, 1.0));
	bvec2 b = lessThan(histUv, vec2(0.0, 0.0));
	blend = any(bvec2(any(a), any(b))) ? 1.0 : blend;

	vec3 curSample = neighbourhood[4];
	vec3 color = mix(histSample, curSample, vec3(blend));

	imageStore(out_color, pixelCoords, vec4(color, 0.0));
	//	out_Color.rgb = vec3(vel.x, 0, vel.y);
	// out_Color.rgb = vec3(texture(gMotion, textureCoords).rg + 0.5, 0.0);
}